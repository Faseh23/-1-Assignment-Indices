#include <iostream>
#include <unordered_map>
#include <vector>

std::vector<int> twoSum(std::vector<int>& nums, int target) {
    std::unordered_map<int, int> hashMap;  // To store the difference and its index
    for (int i = 0; i < nums.size(); ++i) {
        int complement = target - nums[i];  // Find the complement that makes the sum equal to target
        
        if (hashMap.find(complement) != hashMap.end()) {
            return {hashMap[complement], i};  // If complement is found, return the indices
        }
        
        hashMap[nums[i]] = i;  // Store the current number and its index
    }
    return {};  // This is just a fallback, but the problem guarantees that a solution exists
}

int main() {
    std::vector<int> nums = {2, 7, 11, 15};
    int target = 9;
    
    std::vector<int> result = twoSum(nums, target);
    
    std::cout << "Output: [" << result[0] << ", " << result[1] << "]" << std::endl;
    return 0;
}
